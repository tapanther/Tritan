#! /usr/bin/env python3

import sys
import argparse
import yaml

import re

from datetime import datetime
from pathlib import Path, PurePath
from jinja2 import Environment, FileSystemLoader


#---------------------
# Parse Arguments
#---------------------

parser = argparse.ArgumentParser()

parser.add_argument(
    '-t',
    '--templates',
    default = './templates',
    help = 'Directory path to get templates from.'
)

parser.add_argument(
    '-l',
    '--lib',
    default = './lib',
    help = 'Directory to get YAML inputs.'
)

parser.add_argument(
    '-o',
    '--output',
    default = './docs',
    help = 'Output root directory.'
)

args = parser.parse_args()


#---------------------
# Setup Jinja2
#---------------------

def numberFormat(value):
    return format(int(value), ',d')

def listText(text):
    return '\n    '.join(text.split('\n'))

env = Environment(
    loader=FileSystemLoader(args.templates),
    trim_blocks = True,
    lstrip_blocks = True
)

env.filters['numberFormat'] = numberFormat
env.filters['listText'] = listText


#---------------------
# Prepare the nav
#---------------------

def ageDecode(event):
    ageStr = event['Date']
    age = re.sub(r'[^ 0-9]', '', ageStr)
    age = age.split(' ')
    age = list(filter(lambda x: x.isdigit(), age))
    age = list(map(int, age))
    age.extend([0,0,0])
    print(age)
    return (age[0], age[1], age[2])
    
navStruct = dict()
date = datetime.today().strftime('%Y-%m-%d')

timelineStruct = list()

md_lib = list()

for path in Path(args.lib).glob('**/*.yml'):

    
    with open(path) as y_file:
        y_data = yaml.load(y_file)

    outpath = PurePath(args.output, path.stem).with_suffix('.md')

    md_lib.append({'path' : outpath, 'data' : y_data})

    #---------------------
    # Assemble the nav
    #---------------------

    rFile = PurePath(outpath.name)
    
    try:
        navStruct[y_data['class']].append({ y_data['title'] : str(rFile) })
    except KeyError:
        navStruct[y_data['class']] = [ { y_data['title'] : str(rFile) } ]

    # Gather timeline information for a common timeline
    if ('History' in y_data) and ('Timeline' in y_data['History']):


        # Custom sort for timeline entries
        y_data['History']['Timeline'] = sorted(
            y_data['History']['Timeline'],
            key=ageDecode)


        for event in y_data['History']['Timeline']:
            event.update({'Source' : y_data['title']})
            timelineStruct.append(event)

#---------------------
# Write the Timeline
#---------------------

template = env.get_template('timeline.md')
timeline = Path('./docs', 'timeline.md')

navStruct['General'] = [ { 'Timeline' : str(timeline.name) } ]

timelineSorted = sorted(timelineStruct, key=ageDecode)

with open(timeline, 'w') as timelineFile:
    timelineFile.write(template.render(timeline = timelineSorted, date=date))

#---------------------
# Run link templater
#---------------------

links = Path(args.templates, 'links.md.j2')
template = env.get_template('links.j2')

with open(links, 'w') as linkFile:
    linkFile.write(template.render(navStruct = navStruct))

#---------------------
# Run Templater
#---------------------
for entry in md_lib:

    outpath = entry['path']
    
    y_data = entry['data']

    template = env.get_template(y_data['template'])

    Path(outpath.parent).mkdir(parents = True, exist_ok = True)
    
    with open(outpath, 'w') as outfile:
        outfile.write(template.render(y_data, date=date))
            
#---------------------
# Write the config
#---------------------

template = env.get_template('mkdocs.yml')
config = Path('mkdocs.yml')
with open(config, 'w') as configFile:
    configFile.write(template.render(navStruct = navStruct))

#---------------------
# Write the Main Page
#---------------------

template = env.get_template('index.md')
index = Path('./docs', 'index.md')

with open(index, 'w') as indexFile:
    indexFile.write(template.render(navStruct = navStruct,
                                    date = date))

