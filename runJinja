#! /usr/bin/env python3

import sys
import argparse
import yaml

import re

from datetime import datetime
from pathlib import Path, PurePath
from jinja2 import Environment, FileSystemLoader, contextfilter
from shutil import copytree, rmtree
from anytree import Node, RenderTree, Resolver
from anytree.search import find_by_attr as findNode
from anytree.resolver import ResolverError, ChildResolverError
from anytree.exporter import DictExporter

#---------------------
# Parse Arguments
#---------------------

parser = argparse.ArgumentParser()

parser.add_argument(
    '-t',
    '--templates',
    default = './templates',
    help = 'Directory path to get templates from.'
)

parser.add_argument(
    '-l',
    '--lib',
    default = './lib',
    help = 'Directory to get YAML inputs.'
)

parser.add_argument(
    '-o',
    '--output',
    default = './docs',
    help = 'Output root directory.'
)

args = parser.parse_args()

outdir = Path(args.output)
if outdir.exists():
    rmtree(outdir)

outdir.mkdir(parents = True, exist_ok = True)


#---------------------
# Setup Jinja2
#---------------------

def numberFormat(value):
    try:
        formattedStr = format(int(value), ',d')
    except (TypeError, ValueError):
        formattedStr = value
    return formattedStr

def listText(text):
    return '\n    '.join(text.split('\n'))

env = Environment(
    loader=FileSystemLoader(args.templates),
    trim_blocks = True,
    lstrip_blocks = True
)

env.filters['numberFormat'] = numberFormat
env.filters['listText'] = listText

#---------------------
#
#---------------------
@contextfilter
def autoLink(ctx, rawText):
    if 'no_autolink' in ctx.resolve('control'):
        return rawText
    myTitle = ctx.resolve('title')
    for linkTarget in globalLinks:
        searchText = linkTarget['text']
        linkText = linkTarget['link']
        if (linkText != myTitle):
            searchPattern = r'\b' + f"({searchText}('s?)?)" + r'\b' + r'(?![^[]*])'
            replaceText = r'[\1]' + f'[{linkText}]'
            rawText = re.sub(searchPattern, replaceText, rawText, count=1)
    return rawText

env.filters['autoLink'] = autoLink

#---------------------
# Prepare the nav
#---------------------

def ageDecode(event):
    map = {'KAL' : 1, 'IDE' : 20, 'NON' : 28, 'X' : 2}
    ageStr = event['Date']
    ageList = ageStr.split(' ')
    ageList.extend(['0KAL','0KAL','0KAL'])
    ageList[0] = int(re.sub(r'[^- 0-9]', '', ageList[0]))
    ageList[1] = int(re.sub(r'[^ 0-9]', '', ageList[1]))
    try:
        day = int(re.sub(r'([0-9]*).*', r'\1', ageList[2]))
    except ValueError:
        day = 1
    mark = re.sub(r'[0-9]*(KAL|IDE|NON|X)', r'\1', ageList[2])
    ageList[2] = (32 - map[mark] - (day - 2)) % 31
    return (ageList[0], ageList[1], ageList[2])


navTree = Node('Root')
navStruct = dict()
date = datetime.today().strftime('%Y-%m-%d')

timelineStruct = list()

md_lib = list()


def resolveTreeNode(tree, pathStr):
    resolver = Resolver('name')
    try:
        node = resolver.get(tree, pathStr)
    except (ResolverError, ChildResolverError):
        parent = resolveTreeNode(tree, pathStr.rsplit('/',1)[0])
        node = Node(pathStr.split('/')[-1], parent=parent)
        
    return node

for path in Path(args.lib).glob('**/*.yml'):

    
    with open(path) as y_file:
        y_data = yaml.load(y_file)

    outpath = PurePath(args.output, path.stem).with_suffix('.md')

    md_lib.append({'path' : outpath, 'data' : y_data})

    #---------------------
    # Assemble the nav
    #---------------------

    rFile = PurePath(outpath.name)

    resolveTreeNode(navTree, f"/Root/{y_data['node']}/{y_data['title']}")
    
    try:
        navStruct[y_data['class']].append(
            { 'title' : y_data['title'],
              'file' : str(rFile) }
        )
    except KeyError:
        navStruct[y_data['class']] = [ { 'title' : y_data['title'],
                                         'file' : str(rFile) } ]

    try:
        navStruct[y_data['class']][-1]['altLink'] = y_data['altLink']
    except KeyError:
        pass

    
    navStruct[y_data['class']][-1]['noLink'] = ('control' in y_data
                                                and 'no_link' in y_data['control'])

    navStruct[y_data['class']][-1]['noAutoLink'] = ('control' in y_data
                                                    and 'no_autolink' in y_data['control'])

            
    # Gather timeline information for a common timeline
    if ('History' in y_data) and ('Timeline' in y_data['History']):


        # Custom sort for timeline entries
        y_data['History']['Timeline'] = sorted(
            y_data['History']['Timeline'],
            key=ageDecode)


        for event in y_data['History']['Timeline']:
            event.update({'Source' : y_data['title']})
            timelineStruct.append(event)


print(RenderTree(navTree).by_attr())
print(yaml.dump(DictExporter().export(navTree), default_flow_style=False))

#---------------------
# Write the Timeline
#---------------------

template = env.get_template('Timeline.md')
timeline = Path('./docs', 'Timeline.md')

try:
    navStruct['General'].append({ 'title' : 'Timeline',
                                  'file' : str(timeline.name) })
except KeyError:
    navStruct['General'] = [ { 'title' : 'Timeline',
                               'file' : str(timeline.name) } ]

navStruct['General'][-1]['noLink'] = False
navStruct['General'][-1]['noAutoLink'] = False    


timelineSorted = sorted(timelineStruct, key=ageDecode)

with open(timeline, 'w') as timelineFile:
    timelineFile.write(template.render(timeline = timelineSorted, date=date))


#---------------------
# Prepare AutoLinker
#---------------------

linksList = list()
for categoryList in navStruct.values():
    for linkTarget in categoryList:
        if not linkTarget['noAutoLink']:
            linksList.append({'text' : linkTarget['title'],
                                'link' : linkTarget['title']})
            try:
                linksList.append({'text' : linkTarget['altLink'],
                                  'link' : linkTarget['title']})
            except KeyError:
                pass

globalLinks = sorted(linksList, key = lambda k: len(k['text']), reverse = True)

##print(yaml.dump(globalLinks, default_flow_style=False))
    
#---------------------
# Run link templater
#---------------------

links = Path(args.templates, 'links.md.j2')
template = env.get_template('links.j2')

with open(links, 'w') as linkFile:
    linkFile.write(template.render(navStruct = navStruct))

    
#---------------------
# Run Templater
#---------------------
for entry in md_lib:

    outpath = entry['path']
    
    y_data = entry['data']

    template = env.get_template(y_data['template'])

    with open(outpath, 'w') as outfile:
        outfile.write(template.render(y_data, date=date))
            
#---------------------
# Write the config
#---------------------

template = env.get_template('mkdocs.yml')
config = Path('mkdocs.yml')
with open(config, 'w') as configFile:
    configFile.write(template.render(navStruct = navStruct))

#---------------------
# Write the Main Page
#---------------------

template = env.get_template('index.md')
index = Path('./docs', 'index.md')

with open(index, 'w') as indexFile:
    indexFile.write(template.render(navStruct = navStruct,
                                    date = date))


libpath = Path('lib')
copytree(libpath.joinpath('img'), outdir.joinpath('img'))
copytree(libpath.joinpath('stylesheets'), outdir.joinpath('stylesheets'))
